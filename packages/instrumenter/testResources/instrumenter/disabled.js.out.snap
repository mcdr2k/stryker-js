// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`instrumenter integration should not place disabled mutants 1`] = `
"function stryNS_9fa48() {
  var g = typeof globalThis === 'object' && globalThis && globalThis.Math === Math && globalThis || new Function(\\"return this\\")();
  var ns = g.__stryker__ || (g.__stryker__ = {});
  if (ns.activeMutants === undefined && g.process && g.process.env && g.process.env.__STRYKER_ACTIVE_MUTANT__) {
    ns.activeMutants = new Set([g.process.env.__STRYKER_ACTIVE_MUTANT__]);
  }
  function retrieveNS() {
    return ns;
  }
  stryNS_9fa48 = retrieveNS;
  return retrieveNS();
}
stryNS_9fa48();
function stryCov_9fa48() {
  var ns = stryNS_9fa48();
  var cov = ns.mutantCoverage || (ns.mutantCoverage = {
    static: {},
    perTest: {}
  });
  function cover() {
    var c = cov.static;
    if (ns.currentTestId) {
      c = cov.perTest[ns.currentTestId] = cov.perTest[ns.currentTestId] || {};
    }
    var a = arguments;
    for (var i = 0; i < a.length; i++) {
      c[a[i]] = (c[a[i]] || 0) + 1;
    }
  }
  stryCov_9fa48 = cover;
  cover.apply(null, arguments);
}
function stryMutAct_9fa48(id) {
  var ns = stryNS_9fa48();
  function isActive(id) {
    if (ns.activeMutants !== void 0 && ns.activeMutants.has(id)) {
      if (ns.hitLimits !== void 0) {
        var hitCount = ns.hitCounts.get(id) + 1;
        ns.hitCounts.set(id, hitCount);
        if (hitCount > ns.hitLimits.get(id)) {
          throw new Error(\\"Stryker: Hit count limit reached for mutant '\\" + id + \\"' (\\" + hitCount + \\")\\");
        }
      }
      return true;
    }
    return false;
  }
  stryMutAct_9fa48 = isActive;
  return isActive(id);
}
function factorial(num) {
  if (stryMutAct_9fa48(\\"0\\")) {
    {}
  } else {
    stryCov_9fa48(\\"0\\");
    if (stryMutAct_9fa48(\\"3\\") ? typeof num === 'number' : stryMutAct_9fa48(\\"2\\") ? false : stryMutAct_9fa48(\\"1\\") ? true : (stryCov_9fa48(\\"1\\", \\"2\\", \\"3\\"), typeof num !== (stryMutAct_9fa48(\\"4\\") ? \\"\\" : (stryCov_9fa48(\\"4\\"), 'number')))) throw new Error(stryMutAct_9fa48(\\"5\\") ? \\"\\" : (stryCov_9fa48(\\"5\\"), \\"Input must be a number.\\"));
    if (stryMutAct_9fa48(\\"9\\") ? num >= 0 : stryMutAct_9fa48(\\"8\\") ? num <= 0 : stryMutAct_9fa48(\\"7\\") ? false : stryMutAct_9fa48(\\"6\\") ? true : (stryCov_9fa48(\\"6\\", \\"7\\", \\"8\\", \\"9\\"), num < 0)) throw new Error(stryMutAct_9fa48(\\"10\\") ? \\"\\" : (stryCov_9fa48(\\"10\\"), \\"Input must not be negative.\\"));
    var i = 2,
      o = 1;

    // Stryker disable next-line BlockStatement: Infinite loop
    while (stryMutAct_9fa48(\\"13\\") ? i > num : stryMutAct_9fa48(\\"12\\") ? i < num : stryMutAct_9fa48(\\"11\\") ? false : (stryCov_9fa48(\\"11\\", \\"12\\", \\"13\\"), i <= num)) {
      // Stryker disable next-line UpdateOperator: Infinite loop
      stryMutAct_9fa48(\\"15\\") ? o /= i++ : (stryCov_9fa48(\\"15\\"), o *= i++);
    }
    return o;
  }
}
;"
`;
